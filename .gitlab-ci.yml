# Utilise l'image Docker 'docker/compose:latest' pour exécuter les jobs de ce pipeline
image: docker/compose:latest

# Utilise le service 'docker:dind' (Docker in Docker) pour permettre l'exécution de Docker à l'intérieur des jobs
services:
  - docker:dind

# Définit les étapes du pipeline
stages:
  - build
  - test
  - debug

# Définit des variables d'environnement pour Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Exécute 'docker info' avant chaque job pour afficher des informations sur l'environnement Docker
before_script:
  - docker info

# Job 'build' pour construire les images Docker de l'application
build:
  stage: build
  script:
    - docker-compose build
  # Conserve l'ensemble du répertoire de travail comme artefact pour les jobs suivants
  artifacts:
    paths:
      - ./

# Job 'tests_unitaires' pour exécuter les tests unitaires de l'application
tests_unitaires: # Définit une nouvelle tâche appelée "tests_unitaires"
  stage: test # Attribue cette tâche à l'étape "test" de la pipeline CI/CD
  script: 
    - docker-compose up --build --exit-code-from test # Exécute la commande docker-compose pour construire les services définis dans le fichier docker-compose.yml et exécuter le service "test". L'option --exit-code-from fait en sorte que le code de sortie de cette commande soit le code de sortie du service "test".
  artifacts: # Définit les artefacts qui seront conservés après l'exécution de cette tâche
    reports: 
      junit: test-results/resultat_tests.xml # Spécifie que le rapport de test au format JUnit sera conservé. GitLab utilise ce rapport pour afficher les résultats des tests dans l'interface utilisateur.
    paths: 
      - test-results/resultat_tests.xml # Spécifie le chemin du fichier de rapport de test qui sera conservé.
    when: always # Indique que les artefacts doivent être conservés quel que soit le résultat de la tâche (succès, échec ou annulation).

#job test d'intégration
tests_integration:
  stage: test_integration
  script:
    - docker-compose up -d app
    - docker-compose run -T app npm run test:integration
  artifacts:
    reports:
      junit: integration-test-results/resultat_tests_integration.xml
    paths:
      - integration-test-results/resultat_tests_integration.xml
    when: always