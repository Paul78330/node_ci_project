# Utilise l'image Docker 'docker/compose:latest' pour exécuter les jobs de ce pipeline
image: docker/compose:latest

# Utilise le service 'docker:dind' (Docker in Docker) pour permettre l'exécution de Docker à l'intérieur des jobs
services:
  - docker:dind

# Définit les étapes du pipeline
stages:
  - build
  - test
  - debug

# Définit des variables d'environnement pour Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Exécute 'docker info' avant chaque job pour afficher des informations sur l'environnement Docker
before_script:
  - docker info

# Job 'build' pour construire les images Docker de l'application
build:
  stage: build
  script:
    - docker-compose build
  # Conserve l'ensemble du répertoire de travail comme artefact pour les jobs suivants
  artifacts:
    paths:
      - ./

# Job 'tests_unitaires' pour exécuter les tests unitaires de l'application
tests_unitaires:
  stage: test
  script:
    - docker-compose up --build --exit-code-from test
  artifacts:
    reports:
      junit: test-results/resultat_tests.xml
    paths:
      - test-results/resultat_tests.xml
    when: always